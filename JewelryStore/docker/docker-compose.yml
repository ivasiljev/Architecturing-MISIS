services:
  # JewelryStore API
  jewelrystore-api:
    build:
      context: ../src
      dockerfile: JewelryStore.API/Dockerfile
    container_name: jewelrystore-api
    ports:
      - "5257:8080"  # Map to original port 5257
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=JewelryStoreDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Kafka=kafka:9092
      - Kafka__BootstrapServers=kafka:9092
    networks:
      - jewelrystore-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # JewelryStore BlazorUI  
  jewelrystore-ui:
    build:
      context: ../src
      dockerfile: JewelryStore.BlazorUI/Dockerfile
    container_name: jewelrystore-ui
    ports:
      - "5216:5000"  # Map to original port 5216
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ApiSettings__BaseUrl=http://jewelrystore-api:8080
    networks:
      - jewelrystore-network
    depends_on:
      - jewelrystore-api
    restart: unless-stopped

  # SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: jewelrystore-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: jewelrystore-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: jewelrystore-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo stat | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: jewelrystore-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"  # Internal Docker network
      - "9094:9094"  # External host access
      - "9999:9999"  # JMX port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9999"
      # Дополнительные настройки для стабильности
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 60000
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: jewelrystore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jewelrystore-network

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: jewelrystore-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - jewelrystore-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: jewelrystore-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - jewelrystore-network
    depends_on:
      - prometheus

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: jewelrystore-redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
    networks:
      - jewelrystore-network
    depends_on:
      - redis

  # Node Exporter (system metrics) - simplified for Windows
  node-exporter:
    image: prom/node-exporter:latest
    container_name: jewelrystore-node-exporter
    ports:
      - "9100:9100"
    networks:
      - jewelrystore-network

  # SQL Server Exporter
  sql-exporter:
    image: burningalchemist/sql_exporter:latest
    container_name: jewelrystore-sql-exporter
    ports:
      - "9399:9399"
    volumes:
      - ./monitoring/sql_exporter.yml:/etc/sql_exporter/sql_exporter.yml:ro
    command:
      - "--config.file=/etc/sql_exporter/sql_exporter.yml"
      - "--web.listen-address=0.0.0.0:9399"
    networks:
      - jewelrystore-network
    depends_on:
      - sqlserver

  # Kafka Exporter - Direct Kafka API metrics  
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: jewelrystore-kafka-exporter
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka:9092
      - --web.listen-address=0.0.0.0:9308
      - --web.telemetry-path=/metrics
      - --log.level=info
    networks:
      - jewelrystore-network
    depends_on:
      kafka:
        condition: service_healthy

  # Kafka UI (optional, for debugging)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: jewelrystore-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - jewelrystore-network
    depends_on:
      kafka:
        condition: service_healthy

networks:
  jewelrystore-network:
    driver: bridge

volumes:
  sqlserver_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:
  alertmanager_data: 