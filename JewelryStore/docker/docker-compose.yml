services:
  # JewelryStore API
  jewelrystore-api:
    build:
      context: ../src
      dockerfile: JewelryStore.API/Dockerfile
    container_name: jewelrystore-api
    ports:
      - "5257:8080"  # Map to original port 5257
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=JewelryStoreDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672/
    networks:
      - jewelrystore-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # JewelryStore BlazorUI  
  jewelrystore-ui:
    build:
      context: ../src
      dockerfile: JewelryStore.BlazorUI/Dockerfile
    container_name: jewelrystore-ui
    ports:
      - "5216:5000"  # Map to original port 5216
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ApiSettings__BaseUrl=http://jewelrystore-api:8080
    networks:
      - jewelrystore-network
    depends_on:
      - jewelrystore-api
    restart: unless-stopped

  # SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: jewelrystore-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: jewelrystore-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: jewelrystore-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,info}] disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - jewelrystore-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: jewelrystore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jewelrystore-network

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: jewelrystore-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - jewelrystore-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: jewelrystore-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - jewelrystore-network
    depends_on:
      - prometheus

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: jewelrystore-redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
    networks:
      - jewelrystore-network
    depends_on:
      - redis

  # Node Exporter (system metrics) - simplified for Windows
  node-exporter:
    image: prom/node-exporter:latest
    container_name: jewelrystore-node-exporter
    ports:
      - "9100:9100"
    networks:
      - jewelrystore-network

  # SQL Server Exporter
  sql-exporter:
    image: burningalchemist/sql_exporter:latest
    container_name: jewelrystore-sql-exporter
    ports:
      - "9399:9399"
    volumes:
      - ./monitoring/sql_exporter.yml:/etc/sql_exporter/sql_exporter.yml:ro
    command:
      - "--config.file=/etc/sql_exporter/sql_exporter.yml"
      - "--web.listen-address=0.0.0.0:9399"
    networks:
      - jewelrystore-network
    depends_on:
      - sqlserver

  # RabbitMQ Exporter (for Prometheus metrics)
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: jewelrystore-rabbitmq-exporter
    ports:
      - "9419:9419"
    environment:
      RABBIT_URL: "http://rabbitmq:15672"
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      PUBLISH_PORT: 9419
      OUTPUT_FORMAT: TTY
      LOG_LEVEL: info
    networks:
      - jewelrystore-network
    depends_on:
      rabbitmq:
        condition: service_healthy

networks:
  jewelrystore-network:
    driver: bridge

volumes:
  sqlserver_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  alertmanager_data: 