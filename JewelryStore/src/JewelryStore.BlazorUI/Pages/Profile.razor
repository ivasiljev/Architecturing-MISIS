@page "/profile"
@using JewelryStore.BlazorUI.Services
@using JewelryStore.BlazorUI.Models
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IAuthService AuthService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Мой профиль - JewelryStore</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-6">
        <MudText Typo="Typo.h4" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" />
            Мой профиль
        </MudText>

        @if (!AuthService.IsAuthenticated)
        {
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                Для просмотра профиля необходимо войти в систему.
                <MudButton Href="/login" Color="Color.Primary" Variant="Variant.Text" Class="ml-2">
                    Войти
                </MudButton>
            </MudAlert>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-center align-center" style="min-height: 300px;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (currentUser == null)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                Не удалось загрузить данные профиля. Попробуйте обновить страницу.
            </MudAlert>
        }
        else
        {
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Информация о профиле" Icon="@Icons.Material.Filled.Info">
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="1">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Основная информация</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <strong>Имя пользователя:</strong> @currentUser.Username
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <strong>Email:</strong> @currentUser.Email
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <strong>Имя:</strong> @currentUser.FirstName
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <strong>Фамилия:</strong> @currentUser.LastName
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <strong>Телефон:</strong> @(currentUser.Phone ?? "Не указан")
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <strong>Адрес:</strong> @(currentUser.Address ?? "Не указан")
                                    </MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        <strong>Дата регистрации:</strong> @currentUser.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudCard Elevation="1">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Статистика</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" Class="mr-2" />
                                        <strong>Всего заказов:</strong> @userOrders.Count
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-2" />
                                        <strong>Общая сумма покупок:</strong> @totalPurchases.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("ru-RU"))
                                    </MudText>
                                    <MudText Typo="Typo.body1" Class="mb-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" />
                                        <strong>Статус:</strong> @(currentUser.IsActive ? "Активный" : "Неактивный")
                                    </MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton StartIcon="@Icons.Material.Filled.ShoppingBag" 
                                              Color="Color.Primary" 
                                              Variant="Variant.Text"
                                              Href="/orders">
                                        Мои заказы
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Редактировать профиль" Icon="@Icons.Material.Filled.Edit">
                    @if (isEditing)
                    {
                        <EditForm Model="@profileModel" OnValidSubmit="SaveProfile">
                            <DataAnnotationsValidator />
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="profileModel.FirstName" 
                                                  Label="Имя" 
                                                  Required="true"
                                                  RequiredError="Имя обязательно для заполнения"
                                                  For="@(() => profileModel.FirstName)" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="profileModel.LastName" 
                                                  Label="Фамилия" 
                                                  Required="true"
                                                  RequiredError="Фамилия обязательна для заполнения"
                                                  For="@(() => profileModel.LastName)" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="profileModel.Email" 
                                                  Label="Email" 
                                                  InputType="InputType.Email"
                                                  Required="true"
                                                  RequiredError="Email обязателен для заполнения"
                                                  For="@(() => profileModel.Email)" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="profileModel.Phone" 
                                                  Label="Телефон" 
                                                  InputType="InputType.Telephone"
                                                  For="@(() => profileModel.Phone)" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="profileModel.Address" 
                                                  Label="Адрес" 
                                                  Lines="3"
                                                  For="@(() => profileModel.Address)" />
                                </MudItem>
                                <MudItem xs="12">
                                    <div class="d-flex gap-2 mt-4">
                                        <MudButton ButtonType="ButtonType.Submit" 
                                                   Variant="Variant.Filled" 
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.Save"
                                                   Disabled="isSaving">
                                            @if (isSaving)
                                            {
                                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                                <MudText Class="ms-2">Сохранение...</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Сохранить</MudText>
                                            }
                                        </MudButton>
                                        <MudButton Variant="Variant.Outlined" 
                                                   Color="Color.Secondary"
                                                   StartIcon="@Icons.Material.Filled.Cancel"
                                                   OnClick="CancelEdit">
                                            Отмена
                                        </MudButton>
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    }
                    else
                    {
                        <div class="text-center">
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="StartEdit">
                                Редактировать профиль
                            </MudButton>
                        </div>
                    }
                </MudTabPanel>

                <MudTabPanel Text="Безопасность" Icon="@Icons.Material.Filled.Security">
                    <MudAlert Severity="Severity.Info" Class="mb-4">
                        Функции изменения пароля и управления безопасностью будут добавлены в следующих версиях.
                    </MudAlert>
                    
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="1">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Смена пароля</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2" Class="mb-3">
                                        Для обеспечения безопасности рекомендуется регулярно менять пароль.
                                    </MudText>
                                    <MudButton Variant="Variant.Outlined" 
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Lock"
                                               Disabled="true">
                                        Изменить пароль (скоро)
                                    </MudButton>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudCard Elevation="1">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Настройки уведомлений</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2" Class="mb-3">
                                        Управление уведомлениями о заказах и специальных предложениях.
                                    </MudText>
                                    <MudButton Variant="Variant.Outlined" 
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Notifications"
                                               Disabled="true">
                                        Настроить (скоро)
                                    </MudButton>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        }
    </MudPaper>
</MudContainer>

@code {
    private UserViewModel? currentUser;
    private UpdateProfileModel profileModel = new();
    private List<OrderViewModel> userOrders = new();
    private decimal totalPurchases = 0;
    private bool isLoading = true;
    private bool isEditing = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            await LoadUserProfile();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            isLoading = true;
            currentUser = await UserService.GetCurrentUserAsync();
            
            if (currentUser != null)
            {
                profileModel = new UpdateProfileModel
                {
                    FirstName = currentUser.FirstName,
                    LastName = currentUser.LastName,
                    Email = currentUser.Email,
                    Phone = currentUser.Phone,
                    Address = currentUser.Address
                };

                // Загружаем заказы пользователя для статистики
                userOrders = await OrderService.GetUserOrdersAsync();
                
                // Подсчитываем общую сумму покупок (только завершенные заказы)
                totalPurchases = userOrders
                    .Where(o => o.Status != "Cancelled")
                    .Sum(o => o.TotalAmount);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки профиля: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartEdit()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        if (currentUser != null)
        {
            profileModel = new UpdateProfileModel
            {
                FirstName = currentUser.FirstName,
                LastName = currentUser.LastName,
                Email = currentUser.Email,
                Phone = currentUser.Phone,
                Address = currentUser.Address
            };
        }
        isEditing = false;
    }

    private async Task SaveProfile()
    {
        try
        {
            isSaving = true;
            
            var success = await UserService.UpdateProfileAsync(profileModel);
            
            if (success)
            {
                Snackbar.Add("Профиль успешно обновлен!", Severity.Success);
                await LoadUserProfile(); // Перезагружаем данные
                isEditing = false;
            }
            else
            {
                Snackbar.Add("Ошибка при сохранении профиля. Попробуйте еще раз.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка сохранения: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }
} 